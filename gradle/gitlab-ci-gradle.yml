variables:
  GRADLE_IMAGE: "gradle:latest"
  GRADLE_USER_HOME: $CI_PROJECT_DIR/.gradle
  GRADLE_DEPENDENCY_CHECK_TASK: "dependencyCheckAnalyze"

# your pipeline stages
stages:
  - build
  - test
  - package-build
  - package-test
  - infra
  - deploy
  - acceptance
  - publish
  - infra-prod
  - production

.gradle-scripts: &gradle-scripts |
  # BEGSCRIPT
  set -e

  
  function prepare_build_info () {
    if [ $CI_COMMIT_TAG ]; then BUILD_IMAGE_TAG=$CI_COMMIT_TAG
      elif [ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]; then BUILD_IMAGE_TAG=RC.$CI_PIPELINE_ID
      else BUILD_IMAGE_TAG=beta.$CI_PIPELINE_ID
    fi
    echo "BUILD_IMAGE_TAG=$BUILD_IMAGE_TAG" >> build_info.env
    echo "BUILD_IMAGE_NAME=$CI_PROJECT_NAME" >> build_info.env
    BUILD_IMAGE_NAME=$CI_PROJECT_NAME
    BUILD_IMAGE_TAG=$BUILD_IMAGE_TAG
  }

  function clear_env_resource () {
    rm -f src/main/resources/application-*.yml
    rm -rf src/main/resources/config
  }

  function install_docker_cli() {
    wget https://download.docker.com/linux/static/stable/x86_64/docker-19.03.9.tgz
    tar xzvf docker-19.03.9.tgz
    cp docker/* /usr/bin/
  }

  function output_jacoco_coverage() {
    awk -F',' '{ instructions += $4 + $5; covered += $5 } END { print covered"/"instructions " instructions covered"; print 100*covered/instructions "% covered" }' build/reports/jacoco/test/jacocoTestReport.csv
  }

  # ENDSCRIPT

gradle-build:
  extends: .job_gradle_build_template
  rules:
    # exclude merge requests
    - if: '$CI_MERGE_REQUEST_ID == null'
      when: always
    - if: $CI_COMMIT_REF_NAME == "main"
      when: always
    - if: $CI_COMMIT_REF_NAME != "main"
      when: manual
    - if: $CI_COMMIT_TAG
      when: always


.job_gradle_build_template:
  stage: build
  image: $GRADLE_IMAGE
  script:
    - *gradle-scripts
    - cat build.gradle
    # 刪除其他環境設定檔
    - clear_env_resource
    # 裝 Docker
    - install_docker_cli
    - prepare_build_info
    # 開始包版
    - gradle --no-daemon clean build jacocoTestReport bootBuildImage --imageName=${BUILD_IMAGE_NAME}:${BUILD_IMAGE_TAG}
    # 顯示涵蓋率
    - output_jacoco_coverage
    - docker save -o ${BUILD_IMAGE_NAME}_${BUILD_IMAGE_TAG}.tar ${BUILD_IMAGE_NAME}:${BUILD_IMAGE_TAG}
  coverage: '/^(\d+.\d+\%) covered$/'
  artifacts:
    name: "$CI_JOB_NAME artifacts from $CI_PROJECT_NAME on $CI_COMMIT_REF_SLUG"
    expire_in: 1 day
    reports:
      dotenv: build_info.env
      junit:
        - "**/build/test-results/test/TEST-*.xml"
    paths:
      - "**/build/"
      - ${BUILD_IMAGE_NAME}_${BUILD_IMAGE_TAG}.tar
  cache:
    key: "$CI_PROJECT_NAME"
    paths:
      - .gradle
    policy: pull-push

